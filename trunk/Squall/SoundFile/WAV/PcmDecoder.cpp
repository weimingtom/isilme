//-----------------------------------------------------------------------------
//	Классы декодеров ИКМ форматов
//	Копонент звукового двигателя Шквал
//	команда		: AntiTank
//	разработчик	: Гилязетдинов Марат (Марыч)
//-----------------------------------------------------------------------------
#include "PcmDecoder.h"

//-----------------------------------------------------------------------------
//	Декомпрессия 8 битного беззнакового ИКМ моно режим
//	на входе	:	buffer	- указатель на буфер
//					start	- смещение в данных звука, в семплах
//					length	- количество семплов для декодирования
//	на выходе	:	На сколько байт сдвинулся буфер в который
//					читали семплы
//	примечание	:	Декомпрессор декодирует всегда в стерео
//					поток
//-----------------------------------------------------------------------------
DWORD CDecompressPcm8Unsigned::GetMonoSamples(void* buffer, DWORD start,
	DWORD length, bool loop)
{
	BYTE in[2];
	BYTE* out = (BYTE*) buffer;

	// защита от дурака
	if (length) {
		if (SourceData->GetFmt()->nChannels == 1) {
			// моно данные
			// прочитаем данные
			SourceData->seek(start, FILE_BEGIN);
			SourceData->read(out, length);
			out += length;
		} else {
			// стерео данные
			// чтение данных с преобразованием в моно
			SourceData->seek(start * 2, FILE_BEGIN);
			do {
				SourceData->read(&in, 2);
				*out++ = (in[0] + in[1]) >> 1;
			} while (--length);
		}
	}

	// вернем сдвиг в буфере
	return (DWORD) out - (DWORD) buffer;
}
//-----------------------------------------------------------------------------
//	Декомпрессия 8 битного беззнакового ИКМ
//	на входе	:	buffer	- указатель на буфер
//					start	- смещение в данных звука, в семплах
//					length	- количество семплов для декодирования
//	на выходе	:	На сколько байт сдвинулся буфер в который
//					читали семплы
//	примечание	:	Декомпрессор декодирует всегда в стерео
//					поток
//-----------------------------------------------------------------------------
DWORD CDecompressPcm8Unsigned::GetStereoSamples(void* buffer, DWORD start,
	DWORD length, bool loop)
{
	// определение переменных
	BYTE in;
	BYTE* out = (BYTE*) buffer;

	// защита от дурака
	if (length) {
		// данные моно ?
		if (SourceData->GetFmt()->nChannels == 1) {
			// конвертация и перенос данных
			SourceData->seek(start, FILE_BEGIN);
			do {
				SourceData->read(&in, 1);
				*out++ = in;
				*out++ = in;
			} while (--length);
		} else {
			// прочитаем данные
			SourceData->seek(start * 2, FILE_BEGIN);
			SourceData->read(out, length * 2);
			out += length;
		}
	}

	// вернем сдвиг в буфере
	return (DWORD) out - (DWORD) buffer;
}

//-----------------------------------------------------------------------------
//	Создание тишины на заданом отрезке буфера моно режим
//	на входе	:	buffer	- указатель на буфер
//					length	- количество семплов
//	на выходе	:	На сколько байт сдвинулся буфер
//-----------------------------------------------------------------------------
DWORD CDecompressPcm8Unsigned::GetMonoMute(void* buffer, DWORD length)
{
	// защита от дурака
	if (length) {
		// очистка буфера
		memset(buffer, 0x80, length);
	}
	// вернем сдвиг в буфере
	return length;
}

//-----------------------------------------------------------------------------
//	Создание тишины на заданом отрезке буфера стерео режим
//	на входе	:	buffer	- указатель на буфер
//					length	- количество семплов
//	на выходе	:	На сколько байт сдвинулся буфер
//-----------------------------------------------------------------------------
DWORD CDecompressPcm8Unsigned::GetStereoMute(void* buffer, DWORD length)
{
	// защита от дурака
	if (length) {
		length <<= 1;
		// очистка буфера
		memset(buffer, 0x80, length);
	}

	// вернем сдвиг в буфере
	return length;
}

//-----------------------------------------------------------------------------
//	Декомпрессия 16 битного знакового ИКМ моно режим
//	на входе	:	buffer	- указатель на буфер
//					start	- смещение в данных звука, в семплах
//					length	- количество семплов для декодирования
//	на выходе	:	На сколько байт сдвинулся буфер в который
//					читали семплы
//	примечание	:	Декомпрессор декодирует всегда в стерео
//					поток
//-----------------------------------------------------------------------------
DWORD CDecompressPcm16Signed::GetMonoSamples(void* buffer, DWORD start,
	DWORD length, bool loop)
{
	int s;
	short in[2];
	short* out = (short*) buffer;

	// защита от дурака
	if (length) {
		// установка позици воспроизведения
		SourceData->seek(start * _channels * 2, FILE_BEGIN);

		// данные моно ?
		if (_channels == 1) {
			SourceData->read(out, length * 2);
			out += length;
		} else {
			do {
				SourceData->read(&in, 4);
				s = ((int) in[0] + (int) in[1]) >> 1;
				if (s < -32768)
					s = -32768;
				else if (s > 32767)
					s = 32767;
				*out++ = (short) s;
			} while (--length);
		}
	}

	// вернем сдвиг в буфере
	return (DWORD) out - (DWORD) buffer;
}

//-----------------------------------------------------------------------------
//	Декомпрессия 16 битного знакового ИКМ стерео режим
//	на входе	:	buffer	- указатель на буфер
//					start	- смещение в данных звука, в семплах
//					length	- количество семплов для декодирования
//	на выходе	:	На сколько байт сдвинулся буфер в который
//					читали семплы
//	примечание	:	Декомпрессор декодирует всегда в стерео
//					поток
//-----------------------------------------------------------------------------
DWORD CDecompressPcm16Signed::GetStereoSamples(void* buffer, DWORD start,
	DWORD length, bool loop)
{
	short in;
	short* out = (short*) buffer;

	// защита от дурака
	if (length) {
		if (SourceData->GetFmt()->nChannels == 1) {
			// данные моно
			SourceData->seek(start * 2, FILE_BEGIN);
			do {
				SourceData->read(&in, 2);
				*out++ = in;
				*out++ = in;
			} while (--length);
		} else {
			SourceData->seek(start * 4, FILE_BEGIN);
			SourceData->read(out, length * 4);
			out += length * 2;
		}
	}

	// вернем сдвиг в буфере
	return (DWORD) out - (DWORD) buffer;
}

//-----------------------------------------------------------------------------
//	Создание тишины на заданом отрезке буфера моно режим
//	на входе	:	buffer	- указатель на буфер
//					length	- количество семплов
//	на выходе	:	На сколько байт сдвинулся буфер
//-----------------------------------------------------------------------------
DWORD CDecompressPcm16Signed::GetMonoMute(void* buffer, DWORD length)
{
	// защита от дурака
	if (length) {
		length <<= 1;
		// очистка буфера
		memset(buffer, 0x0, length);
	}
	// вернем сдвиг в буфере
	return length;
}

//-----------------------------------------------------------------------------
//	Создание тишины на заданом отрезке буфера стерео режим
//	на входе	:	buffer	- указатель на буфер
//					length	- количество семплов
//	на выходе	:	На сколько байт сдвинулся буфер
//-----------------------------------------------------------------------------
DWORD CDecompressPcm16Signed::GetStereoMute(void* buffer, DWORD length)
{
	// защита от дурака
	if (length) {
		length <<= 2;
		// очистка буфера
		memset(buffer, 0x0, length);
	}
	// вернем сдвиг в буфере
	return length;
}

